generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          String    @default("customer")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
  accounts      Account[]
  orders        Order[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id           String      @id @default(cuid())
  name         String
  description  String?
  price        Float
  image        String?
  categoryId   String
  inStock      Boolean     @default(true)
  featured     Boolean     @default(false)
  preOrder     Boolean     @default(false)
  minOrderTime Int         @default(0)
  ingredients  String?
  allergens    String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]
  category     Category    @relation(fields: [categoryId], references: [id])
}

model Order {
  id                  String      @id @default(cuid())
  userId              String?
  status              String      @default("PENDING")
  total               Float
  customerName        String
  customerEmail       String
  customerPhone       String?
  deliveryAddress     String?
  pickupDate          DateTime?
  pickupTime          String?
  deliveryDate        DateTime?
  specialInstructions String?
  notes               String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  user                User?       @relation(fields: [userId], references: [id])
  orderItems          OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
